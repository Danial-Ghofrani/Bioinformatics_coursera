def de_bruijn_graph(k, dna):
    graph = {}


    for i in range(len(dna) - k + 1):
        prefix = dna[i:i + k - 1]
        suffix = dna[i + 1:i + k]

        if prefix not in graph:
            graph[prefix] = []
        graph[prefix].append(suffix)

    return graph

def print_graph(graph):
    for node, neighbors in sorted(graph.items()):
        if neighbors:
            print(f"{node}: {' '.join(neighbors)}")



# Read and process input
# k = 12
# dna = "GCACCCAGTTGGGATATGACTTTTTCTTGTGAGGAACGACGCACGCCACACCGATGGAATCCTCTTAACACCTTGGCTTTCTGATCTTCCGTGAGCTGTGTCAAGGACGCACTAGCCTGTGCCTTCGAATGGCAATAAAGTGTCTATACCACGCACGTTAGCAGCGTCGGTACCAATTATGCTTGGGTTTTTAGGGGGCATGGAAGACTCGTCGCAACACATGCGGGTTAACTAATTTGGTAAGAACCGGGTGATGCTGGTATCGGCACTCATCTACGCTGGGACACCCTGTAAGGTACCCTGGCCTTTTATTTTTATAGTAATATTGCCACACGTCGTATTGTTCGTAATTGAGGAAACGGTATGTTAGTCGAGGCTCAATCGTGTTAATCCGCTACGTTCCATAATAGGACTCATATCCCTTCCTTCCGCTAAACCCGGGCGCCTAACCCGAAAGTGCAGTGGCAACACAAAAAAACACCGCTTGCTGCCGACGTGATTTCTAGGTATTTTTCGTGGGAGCAGGGGCCGGGACCCGAAGGGAATGCGGCCAGCGGTTACCAATTGAATCACCGAGATGTAGTGCGTAACTCTCTGTCGGGCGTTGCCACTATCAGGTGCGACACCAAATCAGAATTACCCCCATGAAAGCACCACGTCTGTACCCAGAGAGGGATTATTCCCTCATGAAACGGTTGAGCTACGATTTAAGCGAAACAGTAGTGCGGTTACTTAAAGCGTCCACTTATTGTATTCAATGTAATCTGCACCCATTAGAGCGCCACTTTGGTGTGGAAAAGATATGTCCGATAGTAACATTGTGCTGGAAGGATACATTTGTGTAATGACTGGTCGCCTACCTTTGAGACACCTTTTCTGACAGAATCCATCGCGGCGGGTCACGAGCCTGTCCGCACAACCGCACTACAGATTCACGCTTCAGATTCGGTTCATTGTCTCCGTCACGTTAGCAGCGTGACCGCATATGTGATCGTGATATTCGGTAGACGCGAAGCAGTTTAAGAGTCCAACGTATGAGGCTCCCACTGAGAGTATGATATCAGATACCACGTCTCCTCGAACTAGGGTTCACTTCCTCTCAGGCTTCTTCACCGGACTTAGAAAAGTGCTTAAGGCTCTCAGAGTACGGACGAAAGGATGCTTGACTATGGAGGCGGTTCCGACACAAGCCGAAAAATCTCAAGGGATAAATGCCCCCAAGGTCACTACGATAAATCTCCAATTTGTAAGCAGGCCTACGTATCCCTACTACGAGTGGAAGCTGTTTCTGAAGGGGCAGCTTTGGATTTACCAACTAGTTTGTGTCCGATTTTAGTAAGCCCCATCACTACAATCAGCCCCATCTCCGTAGTAGCTTCGGCGCAGCCCTGTCCTGCTGACGTGTCCGTAAGGGGAACCATGCACCATCCGGTTAAAGGAGCGCTTCTACTAGTTCGCCCTAGTGCGGCCAGGTTGGCTTAGAGTTTTAATGTCAACAACAGGGAGGTTCCTGTCGGACTTAGGTATCCTGCGATTGACGTGCCCATGATTGCTTGAAGCTTGCAGGGTATACCGGTTCACGGCCCTTGCGTGACAACGATAAAGGTAAGCATCGTCACGCAAAATTTCCTAAATGCCTCCTACTCCGGGCCTTAACGCTCACTACACGACTTCCACTTTCCACTAGCAAATCAAAGACCCAAGGCGGAGTAACTGATTTTCTAGCCTTATTGTGAACGGCTTATGTTGTTTCTATTAATTTTACTAGCGAACTAATATGGTTCCATTGGTTATGCAGGTGCGAAACCACCGGAGCGCTAACCAGGTAGATCTAATCTGAGGCCGAATTACGCTCTGTGTGCAATACCAGCGAACGACGTGAAGATAACCGTTACCCCTGTGTCGCCGATGGGGACTTATGTGTTAACAGTATGAGACTAGTTGGTAGGAAGTCGTTGTACATGTGGGGTGGGCCGGGCAACGTGCGACGGCTCTGTAAT"  # Sample input
#
# graph = de_bruijn_graph(k, dna)
# print_graph(graph)


def de_bruijn_graph_for_kmers(kmers):
    graph = {}

    for kmer in kmers:
        l = len(kmer)
        prefix = kmer[:-1]
        suffix = kmer[1:]
        if prefix not in graph:
            graph[prefix] = []
        graph[prefix].append(suffix)

    return graph

file = open("dataset_30187_7.txt", "r")
kmers = file.read().split()
graph = de_bruijn_graph_for_kmers(kmers)
print_graph(graph)